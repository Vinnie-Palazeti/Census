



6/20

Maybe finally giving in to database
Downloaded Postgres & postgis extension

Command: psql -U vinniepalazeti django_proj
To get into db


Current state of world folder
I can get leaflet working in Django & have a Postgres database setup with sql
Goal is to have this run as a local instance on lightsail/ec2

Django app reads database based on input to url, like an api

Need to understand how input forms work, so I can query database with input

Also need to return random number via button

To Do:

Caught error on step 3 of medium series, psycopg2 needs to be downloaded version less than 2.9, was catching an error due to outdated Xcode apparently. Need to pip install psycopg2 and make sure I can complete the last step of that walk through


Next, try to upload one of your shapefiles to sql. Create new table & append .shp file
May be easier to insert from pandas, the csv files you already have.

That's the next big step, your data in postgres




6/19
notes:
Struggled mightily with sqlite3 today
The tutorials I was following used the Django sqlite database to store the gps data
They used spatialite mod extension to enable this
Issue is loading extensions is difficult
Needed to run sqlite3 c API to get it to work, downing Xcode now

Though, I do not believe I need to follow this directly
I think I can use the s3 bucket system, which is basically identical to what I have now
It is a GitHub clone thing

Django uses sqlite3 for it's storage, I bet I will need this when doing payment processing, so
Need to understand & use it appropriately
But I think I can get away with using s3 for my shapes & geojson creation

Just need to figure out how to link the two

Maybe start with a free tier s3 bucket with only a single possible call (low data requirement)


Basically I think I will be able to copy tutorials which are reading image data or some sort to Django, but instead I will be reading the geojson files



6/12
Need to decide on charts:

Bar Chart
Pie Chart
Stacked flow chart of percent population
	X axis: Age category 
	Y axis: 0-100%
	Fill: Sex
Won't be too interesting, only two categories that stick hard @ 50/50

Need to visualize race, education, income, & age

Also Google Search Trends

Then need to make comparisons to the state & country average


Maybe I can do comparative graphs 



Looked into web hosting w Flask & Google Cloud
Other options available too

Need to do mapping basics. Get format of main map done w/ hover tools

And make the first few charts

Need to think about overall html format with ccs, keep it simple


Need to plot the dissolved one, then add the tracts as features

checklist:
- got max/min zoom & max bounds functional, along with setView & the zoom parameter
- set map to top of page
- got colors to a good place




*** 5/30 ***


Currently have leaflet working

Can create geojson with python & use that in html + leaflet to create plot

Need to figure out how to format leaflet hover over stuff. I want there to be one big boarder of the  entire area, then the hover will show the census tract

When hover overing over a census tract only some of the stats will appear, need to choose which
	And need to format with control

Need interactive plots for below maps. Thats where the majority of the information will be shown

All variables displayed, Comparison to US as a whole, Google Trends, 
	Should this be done in python or in JS?


************




Get Node working with leaflet
Transfer GEO Json to leaflet thing

Figureout how that would work wit Ghost









**** Updated Updated Plan *****


Now that I have a layout of the land, seems like an easy procedure

procedure:

1.) Coordinate Input
2.) sjoin with country to find state, then sjoin with state to find county
3.) create shape with point, return all census tracts within that shape
4.) query database for tract data

At this point you have the tract data & the shape of the tracts. You need to turn the pandas frame into a geojson.

Here you can use leaflet or folium, which is a python wrapper

The geojson shapes are overlaid on the map




GOALS:

Finish & refine steps 1 - 4
Not only pull the data but document the steps & make it reproducible
Also figure out the point to shape to join issue you had originally







*** Updated plan ***

See if you can save / pickle the geopnadas file & put it up on GitHub

Just store it on a private github for now

**** Have a base version, just need a loop for the state codes & need to clean up/standardize storage

Just put it all in the db folder 







I should write a bash .sh file to rip all this shit

No need for python & requests

That sounds fun


Need to make sure what I am reading in. That when I download the files & get them into sql I have what I need when I pull them back out



I need to identify all of the variables I think are important

Total population,
Skews & averages should be in paid version
Race Demographics
Black, white, hispanic, asian, etc
Sex demographics
Age
Skews young, old, etc

Social economic
Median income
Poverty

I want aggregate tables, so everything, say, within 25 miles of the gps coordinate input

County by county data is only necessary for mapping the counties, which would be cool to do 
For visualizations


Can only call 50 vars at a time. Really need a solution to this AGE thing. -- since it has to be treated differently, I.e. it has to be summed, maybe put it in a different function. Call main get_data() then merge it with get_age() then shoot it into db
Or just put it in a different call.


I need the ability to find a gps location. I would rather not rely on other peoples APIS because what if it breaks

Might be better if I pull the shape files,
But then I have to do a join with the entire table, which might be slow

I should start a notebook so I don't have to keep all this in my head


I think I could simplify this by first doing it on the states, then doing it on the state selected (it might not be slow)